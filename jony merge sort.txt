
class students{
    String name;
    int id;
    double cgpa;
    
    students(String n, int i, double c)
    {
        this.name=n;
        this.id=i;
        this.cgpa=c;
    }
}


public class MergeSort {

    public static void main(String[] args) {
        students st[] = new students[20] ;
        students st2[] = new students[20] ;
      
        st[0] = new students("Arif", 5, 3.55);
        st[1] = new students("Bulbul", 6, 3.23);
        st[2] = new students("Babul", 7, 3.03);
        st[3] = new students("dulolbul", 8, 2.23);
        st[4] = new students("vul", 9, 3.93);
        st[5] = new students("evs", 10, 1.08);
        st[6] = new students("ful", 11, 2.73);
        st[7] = new students("gul", 12, 2.20);
        st[8] = new students("hoas", 13, 3.05);
        st[9] = new students("ioss", 14, 1.00);
        
        String values[]=new String[10];
       
        
        for(int i=0; i<values.length ;i++)
        {
          values[i]=st[i].name;
        }
        
        
        mergeSort(values, 0, values.length - 1);
       
        
        int j=0;
        
        for(int i=0; i<10 ;i++)
        {
            
            for(int k=0;k<10;k++)
            {
                if(values[i].equals(st[k].name))
                {
                    String n= st[k].name;
                    int in = st[k].id;
                    double c=st[k].cgpa;
                    
                    st2[j] = new students(n,in,c);
                    
                    j=j+1;
                }
            }
            
         }
        
        
        for(int i=0; i<10;i++)
        {
            System.out.println(st2[i].name + " " + st2[i].id + " " + st2[i].cgpa);
        }
        
        
    
    }

    public static void mergeSort(String[] a, int from, int to) {
        if (from == to) {
            return;
        }
        int mid = (from + to) / 2;
        // sort the first and the second half
        mergeSort(a, from, mid);
        mergeSort(a, mid + 1, to);
        merge(a, from, mid, to);
    }// end mergeSort
//work

    public static void merge(String[] a, int from, int mid, int to) {
        int n = to - from + 1;       // size of the range to be merged
        String[] b = new String[n];   // merge both halves into a temporary array b
        int i1 = from;               // next element to consider in the first range
        int i2 = mid + 1;            // next element to consider in the second range
        int j = 0;                   // next open position in b

        // as long as neither i1 nor i2 past the end, move the smaller into b
        while (i1 <= mid && i2 <= to) {
            if (a[i1].compareTo(a[i2]) < 0) {
                b[j] = a[i1];
                i1++;
            } else {
                b[j] = a[i2];
                i2++;
            }
            j++;
        }

        // note that only one of the two while loops below is executed
        // copy any remaining entries of the first half
        while (i1 <= mid) {
            b[j] = a[i1];
            i1++;
            j++;
        }

        // copy any remaining entries of the second half
        while (i2 <= to) {
            b[j] = a[i2];
            i2++;
            j++;
        }

        // copy back from the temporary array
        for (j = 0; j < n; j++) {
            a[from + j] = b[j];
        }
    }//end merge

}